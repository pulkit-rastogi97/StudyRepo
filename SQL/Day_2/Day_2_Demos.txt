
select sysdate from dual

January 29,2020

29th January 2020

Wednesday, 29 January 2020

select to_char(sysdate,'Month DD, YYYY') from dual
select to_char(sysdate,'Day, DD Month YYYY') from dual
select to_char(sysdate,'Ddth "of" Month YYYY') from dual

select to_char(sysdate,'Day, DD Month YYYY HH:MI:SS PM') from dual

select to_char(sysdate,'Ddspth Month YYYY') from dual
--Twenty-Ninth January   2020
select to_char(sysdate,'Ddsp Month YYYY') from dual
--Twenty-Nine January   2020


select * from employee
$68,000.00
select to_char(salary,'$99,999.99') from Employee

select to_char(salary,'$99,99,999.99') from Employee


select * from Employee
Where hiredate= to_date('June 10, 2002','Month DD, YYYY')

select to_date('June 10, 2002','Month DD, YYYY')
from dual

select to_number('$68,000','$99,999')   +1000 from dual


select max(salary), min(salary) from employee

select sum(salary) from employee

select max(hiredate), min(hiredate) from employee
select count(*) from Employee
select count(employeeid) from Employee

select count(manager_id) from Employee

select employeeid, manager_id From Employee

select * from Employee


select Department_Id, count(employeeid)
from employee
Group by Department_Id

select Department_Id, sum(salary)
from employee
Group by Department_Id

select Department_Id, max(salary), min(salary)
from employee
Group by Department_Id

select job_id, max(salary)
from employee
Group by Job_id



select Department_Id, sum(salary)
from employee
Group by Department_Id
Having sum(salary)> 95000

select job_id, max(salary), min(salary)
from employee
Where department_id in (10,20)    -- row level filter
group by job_id
having max(salary)>60000          -- Group level filter

select * from
employee
Where department_id in (10,20)


select department_id, sum(salary) as total_sal    -- column list
from Employee                                     -- table names
Where department_id is not null                   -- row level filter
group by department_id                            -- group the data
Having sum(salary)>=95000                         -- group level filter
--Having total_sal>=95000
order by total_sal    -- sort the data



job_id IT_REP,  salary+ 4000
job_id sales_rep  salary+3000
job_id HR       salary+1000
Salary

-- Simple Case Expression
select Employeeid, firstname, lastname, job_id, department_id, salary,
CASE Job_id
When 'IT_REP' Then salary+4000
When 'SALES_REP' then salary+3000
When 'HR' Then salary+1000
ELSE  Salary
END as caculated_salary
from Employee



job_id IT_REP and department_id is 20  salary+ 4000
job_id sales_rep  salary+3000
else Salary


--Searched case Expression
select Employeeid, firstname, lastname, job_id, department_id, salary,
CASE
When job_id = 'IT_REP' and Department_id=20 Then salary+4000
When job_id= 'SALES_REP' then salary+3000
ELSE  Salary
END as caculated_salary
from Employee


select employeeid, job_id From Employee
UNION ALL
select employeeid, job_id from Emphistory

select employeeid, job_id From Employee
UNION
select employeeid, job_id from Emphistory

select employeeid, job_id From Employee
INTERSECT
select employeeid, job_id from Emphistory

All the employees who never changed their department or job_id
select employeeid From Employee
MINUS
select employeeid from Emphistory


--Inner join
select
Employeeid, firstname, lastname, manager_id, salary, job_id, department_name
From Employee, Department
Where Employee.Department_id=Department.Department_id


-- table alais
select
Employeeid, firstname, lastname, manager_id, salary, job_id, department_name
From Employee E, Department D
Where E.Department_id=D.Department_id


select
Employeeid, firstname, lastname, manager_id, salary, job_id, department_name,
L.city
From Employee E, Department D, Location_dtls L
Where E.Department_id=D.Department_id
and D.locationid=L.locationid



2 tables - 1 join condition
3 tables - 2 join conditions
n number of tables - n-1 join conditions



-- ANSI standard

select
Employeeid, firstname, lastname, manager_id, salary, job_id, department_name
From Employee E JOIN Department D
ON E.Department_id=D.Department_id


select
Employeeid, firstname, lastname, manager_id, salary, job_id, department_name, L.city
From Employee E 
JOIN Department D
ON E.Department_id=D.Department_id
JOIN Location_dtls L
ON D.locationid=L.locationid


select * From location_Dtls

select * From department


-- Cartesian product
select
Employeeid, firstname, lastname, manager_id, salary, job_id, department_name
From Employee, Department

Emp 9 
Dept 5
Output 9 * 5 25 rows



-- Natural join ( Inner Join only)
select
Employeeid, firstname, lastname, manager_id, salary, job_id, department_name
From Employee E NATURAL JOIN Department D

 - it will check for common column between the tables with same name 
 and same datatype. Automatically join will be performed based on that col





select
Employeeid, firstname, lastname, manager_id, salary, job_id, department_name
From Employee E, Department D
Where E.Department_id=D.Department_id(+)

select
Employeeid, firstname, lastname, manager_id, salary, job_id, department_name
From Employee E, Department D
Where E.Department_id (+) = D.Department_id

select * From Employee


select
Employeeid, firstname, lastname, manager_id, salary, job_id, department_name
From Employee E LEFT OUTER JOIN Department D
ON E.Department_id=D.Department_id

select
Employeeid, firstname, lastname, manager_id, salary, job_id, department_name
From Employee E RIGHT OUTER JOIN Department D
ON E.Department_id=D.Department_id

select
Employeeid, firstname, lastname, manager_id, salary, job_id, department_name
From Employee E Full OUTER JOIN Department D
ON E.Department_id=D.Department_id


Emp id	Name	Manager id
	1	AAA		null
	2	Shubhangi	1
	3	Kalyani		2

select Emp.employeeid, Emp.firstname, Emp.salary, Emp.job_id,
Mgr.employeeid as Manager_id, Mgr. firstname as managerName
from Employee Emp, Employee Mgr
Where Emp.manager_id=Mgr.Employeeid


Display all employee details whose job id is same as job id of robin.

select a.*
from Employee a, employee b
Where a.job_id= b.job_id
and b.firstname='robin'


select * from Employee

select * From employee b
where b.firstname='robin'


2.	Create a report to display Category name, product name, unit price, 
units in stock. Report should contain all the category names 
whether or not corresponding product exists. 
Also, report should contain all the product details whether they belong 
to any category or not.

select categoryname, productname, unitprice, unitsinstock
from categories C full outer join products P
On C.categoryid=p.categoryid


Display all the emp details whose salary is greather than salary of robin

select salary from employee
Where firstname='robin'

select * From Employee
Where salary > 19500


select * From Employee
Where salary > ( select salary from employee
                  Where firstname='robin')
                  
Display all the employees working in Sales and Finance department

select * from department

select * from employee
Where department_id in (
select department_id from department
where department_name in ('SALES','Fin')
)
                  

Display all employee details whose salary is greater than any of 
the employees in department 20                  

select * from Employee
Where Salary >ANY (select salary from employee
                Where department_id=20 )

23100
19500
60000

ANY  >ANY <ANY >=ANY <=ANY
ALL >ALL <ALL >=ALL <=ALL

Display all employee details whose salary is greater than salary of 
all the employees in department 20          

select * from Employee
Where Salary >ALL (select salary from employee
                Where department_id=20 )
                


Display all emp details along with Corresponding departments average salary

select E.employeeid, E.firstname, E.lastname, E.job_id, E.salary, E.department_id, 
D.avg_salary
From Employee E, (select Department_id, avg(salary) avg_salary
                  from Employee
                Group by department_id ) D
Where E.department_id=D.department_id                
              
Display all emp details whose sal is greater avg sal in their own dept

select E.employeeid, E.firstname, E.lastname, E.job_id, E.salary, E.department_id, 
D.avg_salary
From Employee E, (select Department_id, avg(salary) avg_salary
                  from Employee
                Group by department_id ) D
Where E.department_id=D.department_id
and E.salary > D.avg_salary


Display all employee details whose salary is minimum in their own department

select * from Employee E
Where salary = (select min(salary) from Employee D
                   Where d.department_id=E.department_id)
                   
                   
Display all emp details whose sal is greater avg sal in their own dept

select * from Employee E
Where Salary > ( Select avg(salary) from Employee D
                   Where D.department_id=E.department_id)
                   

Display all the dept details which does not contain any employees


select * from Department D
Where NOT EXISTS ( select * from Employee E
                    Where E.department_id=D.department_id)


Create a report that shows all products by name that are in the Seafood category

select * from products

select * from categories 

select productname from products
Where categoryid IN ( select categoryid from categories 
                      where categoryname='Seafood')
                      
                      

Insert into dept_new(department_id, department_name)
 select department_id, department_name from Department
 where locationid =1
 
 
 Modify the location of Johns department as Pune
 
 Update department
 Set locationid= (select locationid from location_dtls where city='Pune')
 Where department_id=(select department_id from Employee where firstname='John')
 
 select * from department
 Delete from Dept_new
 where locationid=(select locationid from location_Dtls where city='Pune')
 
 
 Create table emp_dtls_6420 as
 select Employeeid, salary, upper(job_id) job_id, E.department_id, manager_id, Initcap(department_name) department_name
 from Employee E, department D
 Where E.department_id=D.department_id
 and d.department_id in (10,20,50)
 
 select * From emp_dtls_6420
 
 create table dept_new_6420
 as select * from department
 
 select * from dept_new_6420